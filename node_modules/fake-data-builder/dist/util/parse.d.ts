declare type TData = {
    [key: string]: unknown;
};
declare type TReturns<T> = T extends (...args: never) => infer R ? R : T;
export declare function parseValue(value: unknown): TReturns<unknown>;
declare type TBuilt<T> = {
    [K in keyof T]: TReturns<T[K]> extends object ? TBuilt<TReturns<T[K]>> : TReturns<T[K]>;
};
export declare function parseData(data: TData): TBuilt<TData>;
export declare function deepAssign(target: TBuilt<TData>, source: TBuilt<TData>): void;
export declare function isData(value: unknown): value is TData;
export {};
