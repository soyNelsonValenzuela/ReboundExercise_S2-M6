"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.randInt = exports.randFloat = exports.randWord = exports.randParagraph = exports.randString = exports.randDate = exports.randBoolean = void 0;
const data_1 = require("./util/data");
function randBoolean(opt) {
    const median = check(0.5, opt === null || opt === void 0 ? void 0 : opt.median);
    return () => Math.random() < median;
}
exports.randBoolean = randBoolean;
function randDate(opt) {
    const now = Date.now();
    const min = now - check(data_1.YEAR_MS * 2, opt === null || opt === void 0 ? void 0 : opt.timeAgo);
    const max = now + check(0, opt === null || opt === void 0 ? void 0 : opt.fromNow);
    return () => new Date(min + Math.random() * (max - min));
}
exports.randDate = randDate;
function randString(opt) {
    const charset = check('ln', opt === null || opt === void 0 ? void 0 : opt.charset);
    const chars = charset.split('').map(c => check('', data_1.CHAR_LIST[c])).join('') + check('', opt === null || opt === void 0 ? void 0 : opt.chars);
    const length = check(5, opt === null || opt === void 0 ? void 0 : opt.length);
    const prefix = check('', opt === null || opt === void 0 ? void 0 : opt.prefix);
    const postfix = check('', opt === null || opt === void 0 ? void 0 : opt.postfix);
    const multiply = check(1, opt === null || opt === void 0 ? void 0 : opt.multiply);
    const separator = check(' ', opt === null || opt === void 0 ? void 0 : opt.separator);
    function chooseChar() {
        return chars.charAt(Math.floor(Math.random() * chars.length));
    }
    function createString() {
        return prefix + genString(length, chooseChar, '') + postfix;
    }
    return () => genString(multiply, createString, separator);
}
exports.randString = randString;
function randParagraph(opt) {
    const numSentences = randInt(minMax(5, 20, opt === null || opt === void 0 ? void 0 : opt.sentencesMin, opt === null || opt === void 0 ? void 0 : opt.sentencesMax));
    const numWords = randInt(minMax(5, 20, opt === null || opt === void 0 ? void 0 : opt.wordsMin, opt === null || opt === void 0 ? void 0 : opt.wordsMax));
    const multiply = check(1, opt === null || opt === void 0 ? void 0 : opt.multiply);
    const separator = check('\n\n', opt === null || opt === void 0 ? void 0 : opt.separator);
    function createSentence() {
        return capital(genString(numWords(), chooseWord, ' ') + '.');
    }
    function createParagraph() {
        return genString(numSentences(), createSentence, ' ');
    }
    return () => genString(multiply, createParagraph, separator);
}
exports.randParagraph = randParagraph;
function randWord(opt) {
    const uppercase = check(false, opt === null || opt === void 0 ? void 0 : opt.uppercase);
    const capitalize = check(false, opt === null || opt === void 0 ? void 0 : opt.capitalize);
    const prefix = check('', opt === null || opt === void 0 ? void 0 : opt.prefix);
    const postfix = check('', opt === null || opt === void 0 ? void 0 : opt.postfix);
    const multiply = check(1, opt === null || opt === void 0 ? void 0 : opt.multiply);
    const separator = check(' ', opt === null || opt === void 0 ? void 0 : opt.separator);
    function createWord() {
        let word = chooseWord();
        if (uppercase)
            word = word.toUpperCase();
        if (capitalize)
            word = capital(word);
        return prefix + word + postfix;
    }
    return () => genString(multiply, createWord, separator);
}
exports.randWord = randWord;
function randFloat(opt) {
    const { min, max } = minMax(0, 1, opt === null || opt === void 0 ? void 0 : opt.min, opt === null || opt === void 0 ? void 0 : opt.max);
    return () => (Math.random() * (max - min)) + min;
}
exports.randFloat = randFloat;
function randInt(opt) {
    const { min, max } = minMax(1, 10, opt === null || opt === void 0 ? void 0 : opt.min, opt === null || opt === void 0 ? void 0 : opt.max);
    return () => Math.floor(Math.random() * ((max - min) + 1)) + min;
}
exports.randInt = randInt;
function chooseWord() {
    return data_1.WORD_LIST[Math.floor(Math.random() * data_1.WORD_LIST.length)];
}
function capital(word) {
    return word[0].toUpperCase() + word.slice(1);
}
function minMax(min, max, newMin, newMax) {
    if (typeof newMax === 'number')
        max = newMax;
    if (typeof newMin === 'number')
        min = newMin;
    if (max < min)
        max = min;
    return { min, max };
}
function check(def, value) {
    return (typeof def === typeof value) ? value : def;
}
function genString(length, callback, separator) {
    return Array(length).fill(undefined).map(callback).join(separator);
}
